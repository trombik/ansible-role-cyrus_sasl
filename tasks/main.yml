---
# tasks file for ansible-role-cyrus-sasl

- name: "Include {{ ansible_os_family }}.yml"
  include_vars: "{{ ansible_os_family }}.yml"

- name: "Include install-{{ ansible_os_family }}.yml"
  include: "install-{{ ansible_os_family }}.yml"

- name: "Include configure-{{ ansible_os_family }}.yml"
  include: "configure-{{ ansible_os_family }}.yml"

- name: Create plug-ins config
  template:
    src: sasl.conf.j2
    dest: "{{ cyrus_sasl_plugin_dir }}/{{ item.key }}.conf"
  with_dict: "{{ cyrus_sasl_config }}"

- name: Get all SASL users
  shell: "{{ cyrus_sasl_sasldblistusers_command }} | cut -f1 -d':'"
  register: register_sasldblistusers
  changed_when: false

- name: Assert cyrus_sasl_sasldblistusers_command ran successfully
  assert:
    that:
      register_sasldblistusers.rc == 0

- name: Delete SASL users
  shell: "{{ cyrus_sasl_saslpassword_command }} -a '{{ item.value.appname }}' -u '{{ item.value.domain }}' -d -f '{{ cyrus_sasl_sasldb_file }}' '{{ item.key }}'"
  with_dict: "{{ cyrus_sasl_user }}"
  no_log: yes
  when:
    - item.value.state == 'absent'
    - item.key ~ '@' ~ item.value.domain in register_sasldblistusers.stdout_lines

- name: Create SASL users
  shell: "echo -n {{ item.value.password }} | {{ cyrus_sasl_saslpassword_command }} -a '{{ item.value.appname }}' -u '{{ item.value.domain }}' -c -p -f '{{ cyrus_sasl_sasldb_file }}' {{ item.key }}"
  with_dict: "{{ cyrus_sasl_user }}"
  no_log: yes
  when:
    - item.value.state == 'present'
    - not item.key ~ '@' ~ item.value.domain in register_sasldblistusers.stdout_lines

- name: Set cyrus_sasl_sasldb_file_real_path
  set_fact:
    # BSDs appends '.db' to the given file name, but others treat it as-is
    # see https://www.freebsd.org/cgi/man.cgi?dbm(3)
    cyrus_sasl_sasldb_file_real_path: "{% if ansible_os_family == 'FreeBSD' or ansible_os_family == 'OpenBSD' %}{{ cyrus_sasl_sasldb_file }}.db{% else %}{{ cyrus_sasl_sasldb_file }}{% endif %}"

- name: See if SASL DB file exists
  stat:
    path: "{{ cyrus_sasl_sasldb_file_real_path }}"
  register: register_sasldb_file

- name: Set group permission on SASL DB file
  file:
    path: "{{ cyrus_sasl_sasldb_file_real_path }}"
    owner: "{{ cyrus_sasl_sasldb_owner }}"
    group: "{{ cyrus_sasl_sasldb_group }}"
    mode: "{{ cyrus_sasl_sasldb_file_permission }}"
  when:
    - register_sasldb_file.stat.exists

- name: Create /usr/local/bin
  file:
    path: /usr/local/bin
    state: directory
    mode: 0755

- name: Create sasl_check_pw.py
  # XXX this script assumes dbm file
  template:
    src: "{% if ansible_python.version.major == 2 %}sasl_check_pw.py2.j2{% else %}sasl_check_pw.py.j2{% endif %}"
    dest: /usr/local/bin/sasl_check_pw
    mode: 0755

- name: See whose password in sasldb needs update
  command: "/usr/local/bin/sasl_check_pw '{{ cyrus_sasl_sasldb_file }}' '{{ item.key }}' '{{ item.value.domain }}'"
  environment:
    userPassword: "{{ item.value.password }}"
  register: register_sasl_check_pw
  with_dict: "{{ cyrus_sasl_user }}"
  changed_when: false
  no_log: no
  when:
    - item.value.state == 'present'

- name: Set password if necessary
  shell: "echo -n '{{ item.item.value.password }}' | {{ cyrus_sasl_saslpassword_command }} -p -f {{ cyrus_sasl_sasldb_file }} -u '{{ item.item.value.domain }}' '{{ item.item.key }}'"
  with_items: "{{ register_sasl_check_pw.results }}"
  no_log: no
  when:
    - "'does not match' in item.stdout_lines"

- name: Start saslauthd
  service:
    name: "{{ cyrus_sasl_saslauthd_service }}"
    state: started
  when:
    - cyrus_sasl_saslauthd_enable

- name: Stop saslauthd
  service:
    name: "{{ cyrus_sasl_saslauthd_service }}"
    enabled: no
    state: stopped
  when:
    - not cyrus_sasl_saslauthd_enable
